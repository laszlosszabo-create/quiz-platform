#!/usr/bin/env node

// Fixed automation rules with actual template IDs
const fetch = require('node-fetch')

const QUIZ_ID = 'c54e0ded-edc8-4c43-8e16-ecb6e33f5291'

// Template ID-k a felt√∂lt√∂tt professzion√°lis sablonokhoz
const TEMPLATE_IDS = {
  'result': '41a7161f-5e10-4eb5-b8bb-d71afa63c4dc',     // üéØ Quiz Eredm√©ny - Professzion√°lis Elemz√©s
  'purchase': 'ab4df3c0-6b19-4d77-ba60-53a80afcd1da',  // üéâ Sikeres V√°s√°rl√°s - √údv√∂z√∂lj√ºk!
  'reminder': '0617282a-a1a5-48b9-a4ff-77e666464c56'   // ‚è∞ Eml√©keztet≈ë - Ne Hagyja Ki!
}

const automationRules = [
  {
    rule_name: 'AI Eredm√©ny Email Automatikus K√ºld√©s',
    trigger_event: 'quiz_complete',
    template_id: TEMPLATE_IDS.result,
    delay_minutes: 5, // 5 perc k√©sleltet√©ssel k√ºldi az eredm√©nyt
    conditions: {
      min_percentage: 0 // Minden eredm√©nyre k√ºld
    },
    is_active: true,
    max_sends: 1,
    priority: 8 // Magas priorit√°s
  },
  
  {
    rule_name: 'V√°s√°rl√°s Meger≈ës√≠t≈ë Email',
    trigger_event: 'purchase', 
    template_id: TEMPLATE_IDS.purchase,
    delay_minutes: 2, // 2 perc k√©sleltet√©ssel k√ºldi a v√°s√°rl√°s meger≈ës√≠t√©st
    conditions: {
      has_purchase: true
    },
    is_active: true,
    max_sends: 1,
    priority: 10 // Legmagasabb priorit√°s
  },
  
  {
    rule_name: '24 √ìr√°s Eml√©keztet≈ë (J√≥ Eredm√©ny≈±eknek)',
    trigger_event: 'no_purchase_reminder',
    template_id: TEMPLATE_IDS.reminder,
    delay_minutes: 1440, // 24 √≥ra (1440 perc) m√∫lva k√ºldi az eml√©keztet≈ët
    conditions: {
      has_purchase: false,
      min_percentage: 50 // Csak 50% feletti eredm√©nyre
    },
    is_active: true,
    max_sends: 1, 
    priority: 5 // K√∂zepes priorit√°s
  }
]

const setupAutomation = async () => {
  console.log('ü§ñ Email automation szab√°lyok be√°ll√≠t√°sa (helyes template ID-kkal)...\n')
  
  for (let i = 0; i < automationRules.length; i++) {
    const rule = automationRules[i]
    
    try {
      console.log(`‚öôÔ∏è Szab√°ly: ${rule.rule_name}`)
      console.log(`   üìß Template ID: ${rule.template_id}`)
      console.log(`   üéØ Trigger: ${rule.trigger_event}`)
      console.log(`   ‚è±Ô∏è  K√©sleltet√©s: ${rule.delay_minutes} perc`)
      console.log(`   üî• Priorit√°s: ${rule.priority}/10`)
      
      const response = await fetch('http://localhost:3000/api/admin/email-automation-rules', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          quiz_id: QUIZ_ID,
          ...rule
        })
      })
      
      if (response.ok) {
        const result = await response.json()
        console.log(`‚úÖ Sikeresen l√©trehozva! Rule ID: ${result.rule?.id || 'N/A'}`)
        console.log(`   üìã Status: Akt√≠v (${rule.is_active ? 'Enabled' : 'Disabled'})\n`)
      } else {
        const errorText = await response.text()
        console.log(`‚ùå Hiba: ${rule.rule_name}`)
        console.log(`   üìù Response: ${errorText}\n`)
      }
      
    } catch (error) {
      console.log(`‚ùå Kapcsol√≥d√°si hiba: ${error.message}\n`)
    }
  }
  
  console.log('üéØ Automation be√°ll√≠t√°s befejezve!')
  console.log('\nüöÄ Be√°ll√≠tott triggerek (id≈ëz√≠t√©ssel):')
  console.log('1. ‚úÖ Quiz befejez√©s ‚Üí Professzion√°lis eredm√©ny email (5 perc)')
  console.log('2. üí≥ V√°s√°rl√°s ‚Üí Sz√©p meger≈ës√≠t≈ë email (2 perc)')  
  console.log('3. ‚è∞ Eml√©keztet≈ë ‚Üí Gy√∂ny√∂r≈± reminder email (24 √≥ra)')
  console.log('\nüí° Az emailek automatikusan kimennek a triggerek ut√°n!')
  console.log('üé® Minden email gy√∂ny√∂r≈± HTML design-nal k√©sz√ºlt!')
  console.log('\nüîß Ellen≈ërizze a m≈±k√∂d√©st az Admin UI-ban!')
}

// Futtat√°s
if (require.main === module) {
  console.log('üéØ Email Automation Rules Setup')
  console.log('================================')
  console.log(`Quiz ID: ${QUIZ_ID}`)
  console.log(`Result Template: ${TEMPLATE_IDS.result}`)
  console.log(`Purchase Template: ${TEMPLATE_IDS.purchase}`)
  console.log(`Reminder Template: ${TEMPLATE_IDS.reminder}`)
  console.log('Folytat√°s 2 m√°sodperc m√∫lva...\n')
  
  setTimeout(() => {
    setupAutomation()
  }, 2000)
}
